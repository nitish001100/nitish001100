
*********************** Singelton Object ***********************

Singleton object is an object which is declared by using object keyword instead by class.

IMPORTANT:-

1: No object is required to call methods declared inside singleton object.
2: In scala, there is no static concept.
3: So scala creates a singleton object to provide entry point for your program execution.
4: If you don't create singleton object, your code will compile successfully but will not produce any output.
5: Methods declared inside Singleton Object are accessible globally.
6: A singleton object can extend classes and traits.


Example:

class Check {
  def function0(): Unit ={
    println("Under Check Function")
  }
}

object SingeltonObject {
  // #1 You can call functions directly which is inside class/Object.
  def function0(): Unit ={
    println("Under Main Object Function")
  }

  // #2 While calling a class you need to create a object.
  def main(args: Array[String]): Unit = {
    function0() //#1
    new Check().function0() //#2
    // #3 You can call directly a content of Singleton object (content like functions).
    CreateOneMoreObject.function2()
  }
}

object CreateOneMoreObject{
  def function2(): Unit ={
    println("Inside create One More Object Function.")
  }
}


IMPORTANT:
*********************** Companion Object ***********************


// When class and Singelton object sharing the same name, then the class known as "Companion Class" and object known as "Companion Object."

class CompanionObject(empId: Int, empName: String) {
  println("Running Companion Class, and you can call it by creating object.") vfev
  println(empId + "," + empName)
}

// If we create the Companion Object, in that case, all the content which is the part of companion object that is static and
// content which is the part of companion class that is accessible thru whie creating object only.

/*object CompanionObject {
  println("Running Companion Object -- ")
  new CompanionObject(101,"Nitish Saxena")
}*/

object CompanionObject {
  new CompanionObject(101, "Nitish Saxena")
  def main(args: Array[String]): Unit = {
    println("Running Companion Object, all behaves like Static.")
    CompanionObject
  }
}



/*************************************** Scala Case Class ***************************************\

Scala Case class, - Immutable (BY Default, decomposable thru Pattern Matching.)
                    It uses equal method to compare instance structurally.
                    It does not use new keyword to instantiate object.
                    All the parameters listed in the case class are public and immutable by default.









/*************************************** Scala Case Object ***************************************\
